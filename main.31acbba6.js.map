{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","file":"main.31acbba6.js","sourceRoot":"..","sourcesContent":["const dot = (a, b) => a.map((x, i) => a[i] * b[i]).reduce((m, n) => m + n);\n\nclass Point {\n  x: number;\n  y: number;\n\n  static readonly zero = new Point(0, 0);\n  static readonly unit = new Point(1, 1);\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  rotateAround(center: Point, angle: number): void {\n    const radians = (Math.PI / 180) * angle,\n      cos = Math.cos(radians),\n      sin = Math.sin(radians),\n      nx = cos * (this.x - center.x) + sin * (this.y - center.y) + center.x,\n      ny = cos * (this.y - center.y) - sin * (this.x - center.x) + center.y;\n    this.x = nx;\n    this.y = ny;\n  }\n\n  add(other: Point) {\n    return new Point(this.x + other.x, this.y + other.y);\n  }\n\n  diff(other: Point) {\n    return new Point(other.x - this.x, other.y - this.y);\n  }\n\n  dot(other: Point) {\n    return this.x * other.x + this.y * other.y;\n  }\n\n  multiply(c: number) {\n    return new Point(this.x * c, this.y * c);\n  }\n\n  flipX() {\n    return new Point(-this.x, this.y);\n  }\n\n  flipY() {\n    return new Point(this.x, -this.y);\n  }\n}\n\ninterface Line {\n  a: Point;\n  b: Point;\n  o?: any;\n}\n\nfunction line_intersects(line1: Line, line2: Line) {\n  const s1_x = line1.b.x - line1.a.x,\n    s1_y = line1.b.y - line1.a.y,\n    s2_x = line2.b.x - line2.a.x,\n    s2_y = line2.b.y - line2.a.y;\n\n  const s =\n      (-s1_y * (line1.a.x - line2.a.x) + s1_x * (line1.a.y - line2.a.y)) /\n      (-s2_x * s1_y + s1_x * s2_y),\n    t =\n      (s2_x * (line1.a.y - line2.a.y) - s2_y * (line1.a.x - line2.a.x)) /\n      (-s2_x * s1_y + s1_x * s2_y);\n\n  return s >= 0 && s <= 1 && t >= 0 && t <= 1;\n}\n\nclass Transform {\n  static nextZInd = 0;\n  position: Point;\n  rotation: number;\n  scale: Point;\n  zInd: number;\n\n  static readonly default = new Transform(Point.zero, 0, Point.unit);\n  static readonly zero = new Transform(Point.zero, 0, Point.zero);\n\n  addPosition(position: Point) {\n    this.add(new Transform(position, 0, Point.zero));\n  }\n\n  addRotation(rotation: number) {\n    this.add(new Transform(Point.zero, rotation, Point.zero));\n    while (this.rotation < 0) {\n      this.add(new Transform(Point.zero, 360, Point.zero));\n    }\n    while (this.rotation >= 360) {\n      this.add(new Transform(Point.zero, -360, Point.zero));\n    }\n  }\n\n  addScale(scale: Point) {\n    const MIN_SCALE = 0.1;\n    this.add(new Transform(Point.zero, 0, scale));\n    if (this.scale.x < MIN_SCALE) {\n      this.add(\n        new Transform(Point.zero, 0, new Point(MIN_SCALE - this.scale.x, 0))\n      );\n    }\n    if (this.scale.y < MIN_SCALE) {\n      this.add(\n        new Transform(Point.zero, 0, new Point(0, MIN_SCALE - this.scale.y))\n      );\n    }\n  }\n\n  add(other: Transform) {\n    this.position = this.position.add(other.position);\n    this.rotation = this.rotation + other.rotation;\n    this.scale = this.scale.add(other.scale);\n  }\n\n  setZInd(newZInd: number) {\n    this.zInd = newZInd;\n  }\n\n  constructor(position: Point, rotation: number, scale: Point, isUI = false) {\n    this.position = position;\n    this.rotation = rotation;\n    this.scale = scale;\n    if (!isUI) {\n      this.zInd = Transform.nextZInd++;\n    }\n  }\n}\n\nabstract class Shape {\n  transform: Transform;\n  selected: boolean;\n\n  constructor(transform: Transform) {\n    this.transform = transform;\n    this.selected = false;\n  }\n\n  abstract getPoints(): Point[];\n  abstract getLines(): Line[];\n  abstract isIntersecting(other: Shape): boolean;\n  abstract isPointInside(point: Point): boolean;\n  abstract draw(ctx: CanvasRenderingContext2D): void;\n  abstract triangulate(): Shape[];\n}\n\nclass Polygon extends Shape {\n  points: Point[];\n  drawPoints: Point[];\n\n  constructor(transform: Transform, points: Point[] = null, normalize = true) {\n    super(transform);\n    this.drawPoints = [];\n    if (points) {\n      if (normalize) {\n        const center = points.reduce(function (\n          prev: Point,\n          curr: Point,\n          _: number,\n          points: Point[]\n        ): Point {\n          return new Point(\n            prev.x + curr.x / points.length,\n            prev.y + curr.y / points.length\n          );\n        },\n        new Point(0, 0));\n        this.points = points.map((p) => center.diff(p).multiply(50));\n      } else {\n        this.points = points;\n      }\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D): void {\n    const absoluteTransform = this.transform;\n    this.drawPoints = this.points.map((point) => {\n      const drawPoint = new Point(\n        this.transform.position.x + point.x * absoluteTransform.scale.x,\n        this.transform.position.y + point.y * absoluteTransform.scale.y\n      );\n\n      drawPoint.rotateAround(\n        new Point(absoluteTransform.position.x, absoluteTransform.position.y),\n        this.transform.rotation\n      );\n\n      return drawPoint;\n    });\n\n    const prevStrokeStyle = ctx.strokeStyle;\n    if (this.selected) {\n      ctx.strokeStyle = \"red\";\n    } else {\n      ctx.strokeStyle = \"black\";\n    }\n\n    ctx.beginPath();\n    ctx.moveTo(this.drawPoints[0].x, this.drawPoints[0].y);\n    for (let i = 1; i < this.drawPoints.length; i++) {\n      ctx.lineTo(this.drawPoints[i].x, this.drawPoints[i].y);\n    }\n    ctx.lineTo(this.drawPoints[0].x, this.drawPoints[0].y);\n    ctx.stroke();\n\n    ctx.strokeStyle = prevStrokeStyle;\n  }\n\n  getPoints() {\n    const absoluteTransform = this.transform;\n    this.drawPoints = this.points.map((point) => {\n      const drawPoint = new Point(\n        this.transform.position.x + point.x * absoluteTransform.scale.x,\n        this.transform.position.y + point.y * absoluteTransform.scale.y\n      );\n\n      drawPoint.rotateAround(\n        new Point(absoluteTransform.position.x, absoluteTransform.position.y),\n        this.transform.rotation\n      );\n\n      return drawPoint;\n    });\n    return this.drawPoints;\n  }\n\n  getLines() {\n    const points = this.getPoints();\n    const lines = [];\n    for (let i = 0; i < points.length; i++) {\n      lines.push({ a: points[i], b: points[(i + 1) % points.length] });\n    }\n    return lines;\n  }\n\n  triangulate() {\n    let triangles: Polygon[] = [];\n    const remaining_points = [...this.points];\n    let prev_remaining_points_len = remaining_points.length;\n    while (remaining_points.length > 3) {\n      for (let i = 0; i < remaining_points.length; i++) {\n        const i1 = i == 0 ? remaining_points.length - 1 : i - 1;\n        const i2 = i;\n        const i3 = (i + 1) % remaining_points.length;\n        const p = [\n          remaining_points[i1],\n          remaining_points[i2],\n          remaining_points[i3],\n        ];\n        const angle =\n          Math.atan2(p[2].y - p[1].y, p[2].x - p[1].x) -\n          Math.atan2(p[0].y - p[1].y, p[0].x - p[1].x);\n        if (Math.abs(angle) >= Math.PI) continue;\n        const triangleCandidate = new Polygon(this.transform, p, false);\n        for (let l = 0; l < remaining_points.length; l++) {\n          if (l == i1 || l == i2 || l == i3) continue;\n          if (triangleCandidate.isPointInside(remaining_points[l])) continue;\n        }\n        triangles = triangles.concat(triangleCandidate);\n        remaining_points.splice(i, 1);\n        break;\n      }\n      if (remaining_points.length == prev_remaining_points_len) {\n        break;\n      } else {\n        prev_remaining_points_len = remaining_points.length;\n      }\n    }\n\n    triangles.push(\n      new Polygon(\n        this.transform,\n        [remaining_points[0], remaining_points[1], remaining_points[2]],\n        false\n      )\n    );\n\n    return triangles;\n  }\n\n  isPointInside(point: Point): boolean {\n    const { x, y } = point;\n\n    let inside = false;\n    for (\n      let i = 0, j = this.drawPoints.length - 1;\n      i < this.drawPoints.length;\n      j = i++\n    ) {\n      const xi = this.drawPoints[i].x,\n        yi = this.drawPoints[i].y;\n      const xj = this.drawPoints[j].x,\n        yj = this.drawPoints[j].y;\n\n      const intersect =\n        yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n      if (intersect) inside = !inside;\n    }\n\n    return inside;\n  }\n\n  isIntersecting(other: Shape): boolean {\n    if (!(other instanceof Polygon)) {\n      throw \"Not implemented\";\n    }\n    const polygon: Polygon = other as Polygon;\n    const myLines: Line[] = [];\n    for (let i = 0; i < this.drawPoints.length; i++) {\n      myLines.push({\n        a: this.drawPoints[i],\n        b: this.drawPoints[(i + 1) % this.drawPoints.length],\n      });\n    }\n    const polygonLines: Line[] = [];\n    for (let i = 0; i < polygon.drawPoints.length; i++) {\n      polygonLines.push({\n        a: polygon.drawPoints[i],\n        b: polygon.drawPoints[(i + 1) % polygon.drawPoints.length],\n      });\n    }\n    for (const myLine of myLines) {\n      for (const polygonLine of polygonLines) {\n        if (line_intersects(myLine, polygonLine)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n\nfunction drawLine(a: Point, b: Point, color: string) {\n  const prevStrokeStyle = ctx.strokeStyle;\n  const prevLineWidth = ctx.lineWidth;\n  ctx.strokeStyle = color;\n  ctx.lineWidth = 1;\n  ctx.beginPath();\n  ctx.moveTo(a.x, a.y);\n  ctx.lineTo(b.x, b.y);\n  ctx.stroke();\n  ctx.strokeStyle = prevStrokeStyle;\n  ctx.lineWidth = prevLineWidth;\n}\n\nfunction drawRect(a: Point, size: number, color: string) {\n  const prevFillStyle = ctx.fillStyle;\n  ctx.fillStyle = color;\n  ctx.rect(a.x - size / 2, a.y - size / 2, size, size);\n  ctx.fill();\n  ctx.fillStyle = prevFillStyle;\n}\n\nfunction cyrus_beck(line: Line, shape: Shape): Array<Line> {\n  const d = line.b.diff(line.a);\n  const normals = [];\n  const shapePoints = shape.getPoints();\n  for (let i = 0; i < shapePoints.length; i++) {\n    const s = shapePoints[(i + 1) % shapePoints.length];\n    const e = shapePoints[i];\n    const x = e.y - s.y;\n    const y = s.x - e.x;\n    normals.push(new Point(x, y));\n  }\n  let tE = 0;\n  let tL = 1;\n  for (let i = 0; i < shapePoints.length; i++) {\n    const dot_prod = normals[i].dot(d);\n    if (dot_prod != 0) {\n      const diff = line.a.diff(shapePoints[i]);\n      const t = normals[i].dot(diff) / -dot_prod;\n      if (dot_prod < 0) tE = Math.max(tE, t);\n      else tL = Math.min(tL, t);\n    } else {\n      const a = shapePoints[i];\n      const b = shapePoints[(i + 1) % shapePoints.length];\n      const c = line.a;\n      if ((b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x) < 0) {\n        tE = 1;\n        tL = -1;\n      }\n    }\n  }\n\n  if (tE > tL) {\n    return [{ a: line.a, b: line.b, o: line.o }];\n  }\n\n  const p1 = line.a.add(line.a.diff(line.b).multiply(tE));\n  const p2 = line.a.add(line.a.diff(line.b).multiply(tL));\n\n  if (tE == 0 && tL == 1) {\n    return [];\n  }\n  if (tE == 0) {\n    return [{ a: p2, b: line.b, o: line.o }];\n  } else if (tL == 1) {\n    return [{ a: line.a, b: p1, o: line.o }];\n  } else {\n    return [\n      { a: line.a, b: p1, o: line.o },\n      { a: p2, b: line.b, o: line.o },\n    ];\n  }\n}\n\nclass Rectangle extends Polygon {\n  constructor(width: number, height: number, transform: Transform) {\n    super(transform);\n    this.points = [];\n    const hWidth: number = width / 2;\n    const hHeight: number = height / 2;\n    this.points.push(new Point(-hWidth, +hHeight));\n    this.points.push(new Point(+hWidth, +hHeight));\n    this.points.push(new Point(+hWidth, -hHeight));\n    this.points.push(new Point(-hWidth, -hHeight));\n  }\n}\n\nclass Button extends Rectangle {\n  static SIZE = 40;\n  glyph: string;\n  clickCallback: (...args: any[]) => void;\n\n  constructor(\n    transform: Transform,\n    glyph: string,\n    clickCallback: (...args: any[]) => void\n  ) {\n    super(Button.SIZE, Button.SIZE, transform);\n    this.glyph = glyph;\n    this.clickCallback = clickCallback;\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    super.draw(ctx);\n    ctx.font = `${Button.SIZE * 0.8}px FontAwesome`;\n    ctx.textBaseline = \"middle\";\n    ctx.textAlign = \"center\";\n\n    ctx.fillText(\n      this.glyph,\n      this.transform.position.x,\n      this.transform.position.y\n    );\n  }\n}\n\nenum Mode {\n  Create,\n  Edit,\n}\n\nenum EditMode {\n  Move,\n  Rotate,\n  Scale,\n  Tabulate,\n}\n\nenum CreateMode {\n  Square,\n  Triangle,\n  Arrow,\n  Star,\n}\n\nlet currMode: Mode = Mode.Edit;\nlet currEditMode: EditMode = EditMode.Move;\nlet currCreateMode: CreateMode = CreateMode.Square;\n\nconst canvas = document.querySelector(\"canvas\");\ncanvas.width = 800;\ncanvas.height = 800;\nconst ctx = canvas.getContext(\"2d\");\n\nconst shapes: Shape[] = [];\n\nfunction getSortedShapes() {\n  return shapes.sort((a, b) => b.transform.zInd - a.transform.zInd);\n}\n\nfunction getTopShapeAt(point: Point) {\n  const shapes = getSortedShapes();\n  for (const shape of shapes) {\n    if (shape.isPointInside(point)) {\n      return shape;\n    }\n  }\n  return null;\n}\n\nfunction getButtonAt(point: Point): Button {\n  const btns = buttons;\n  for (const btn of btns) {\n    if (btn.isPointInside(point)) {\n      return btn;\n    }\n  }\n  return null;\n}\n\nfunction setMode(newMode, btn) {\n  if (tabulateCandidate) {\n    tabulateCandidate.selected = false;\n    tabulateCandidate = null;\n  }\n  currMode = newMode;\n  modeButtons.forEach((btn) => (btn.selected = false));\n  btn.selected = true;\n  draw();\n}\n\nconst createButton = new Button(\n  new Transform(new Point(75, 25), 0, Point.unit),\n  \"\\uF0FE\",\n  () => setMode(Mode.Create, createButton)\n);\n\nconst editButton = new Button(\n  new Transform(new Point(25, 25), 0, Point.unit),\n  \"\\uF044\",\n  () => setMode(Mode.Edit, editButton)\n);\neditButton.selected = true;\n\nfunction setEditMode(newMode, btn) {\n  if (tabulateCandidate) {\n    tabulateCandidate.selected = false;\n    tabulateCandidate = null;\n  }\n  currEditMode = newMode;\n  editButtons.forEach((btn) => (btn.selected = false));\n  btn.selected = true;\n  draw();\n}\n\nconst moveButton = new Button(\n  new Transform(new Point(25, 75), 0, Point.unit),\n  \"\\uF047\",\n  () => setEditMode(EditMode.Move, moveButton)\n);\nmoveButton.selected = true;\n\nconst rotateButton = new Button(\n  new Transform(new Point(75, 75), 0, Point.unit),\n  \"\\uF021\",\n  () => setEditMode(EditMode.Rotate, rotateButton)\n);\n\nconst scaleButton = new Button(\n  new Transform(new Point(125, 75), 0, Point.unit),\n  \"\\uF065\",\n  () => setEditMode(EditMode.Scale, scaleButton)\n);\n\nconst tabulateButton = new Button(\n  new Transform(new Point(175, 75), 0, Point.unit),\n  \"\\uF07D\",\n  () => setEditMode(EditMode.Tabulate, tabulateButton)\n);\n\nfunction setCreateMode(newMode, btn) {\n  currCreateMode = newMode;\n  createButtons.forEach((btn) => (btn.selected = false));\n  btn.selected = true;\n  draw();\n}\n\nconst squareButton = new Button(\n  new Transform(new Point(25, 75), 0, Point.unit),\n  \"\\uF0C8\",\n  () => setCreateMode(CreateMode.Square, squareButton)\n);\nsquareButton.selected = true;\n\nconst triangleButton = new Button(\n  new Transform(new Point(75, 75), 0, Point.unit),\n  \"\\uF0D8\",\n  () => setCreateMode(CreateMode.Triangle, triangleButton)\n);\n\nconst arrowButton = new Button(\n  new Transform(new Point(125, 75), 0, Point.unit),\n  \"\\uF124\",\n  () => setCreateMode(CreateMode.Arrow, arrowButton)\n);\n\nconst starButton = new Button(\n  new Transform(new Point(175, 75), 0, Point.unit),\n  \"\\uF005\",\n  () => setCreateMode(CreateMode.Star, starButton)\n);\n\nlet editShape: Shape = null;\nlet editPrevPoint: Point = null;\n\nconst modeButtons = [createButton, editButton];\nconst editButtons = [moveButton, rotateButton, scaleButton, tabulateButton];\nconst createButtons = [squareButton, triangleButton, arrowButton, starButton];\n\nlet buttons = [];\n\nlet debugMode = false;\n\nfunction switchDebug() {\n  debugMode = !debugMode;\n  draw();\n}\n\nglobalThis.switchDebug = switchDebug;\n\nfunction draw() {\n  ctx.clearRect(0, 0, 800, 800);\n  buttons = modeButtons;\n\n  if (currMode == Mode.Create) {\n    buttons = buttons.concat(createButtons);\n  } else {\n    buttons = buttons.concat(editButtons);\n  }\n\n  for (const btn of buttons) {\n    btn.draw(ctx);\n  }\n\n  const shapes = getSortedShapes().reverse();\n  if (shapes.length > 0) {\n    let visibleLines: Array<Line> = [];//shapes[0].getLines();\n\n    for (let i = 0; i < shapes.length; i++) {\n      const subShapes = shapes[i].triangulate();\n      for (const subShape of subShapes) {\n        if (debugMode) {\n          const subShapeLines = subShape.getLines();\n          subShapeLines.forEach(line => drawLine(line.a, line.b, \"blue\"))\n        }\n        let newVisibleLines: Array<Line> = [];\n        for (const visible_line of visibleLines) {\n          const line_parts = cyrus_beck(visible_line, subShape)\n          newVisibleLines = newVisibleLines.concat(line_parts);\n          if (debugMode) {\n            for (const line of line_parts) {\n              if (line.a != visible_line.a) {\n                drawRect(line.a, 5, 'red');\n              }\n              if (line.b != visible_line.b) {\n                drawRect(line.b, 5, 'red');\n              }\n            }\n          }\n        }\n        visibleLines = newVisibleLines;\n      }\n      let shapeLines = shapes[i].getLines();\n      if (shapes[i].selected) {\n        for (const line of shapeLines) {\n          line.o = true;\n        }\n      }\n      visibleLines = visibleLines.concat(shapeLines);\n    }\n\n    for (const visibleLine of visibleLines) {\n      drawLine(visibleLine.a, visibleLine.b, visibleLine.o ? \"red\" : \"black\");\n    }\n  }\n}\n\nfunction getMousePos(evt) {\n  const rect = canvas.getBoundingClientRect();\n  return new Point(evt.clientX - rect.left, evt.clientY - rect.top);\n}\n\nlet tabulateCandidate: Shape = null;\n\ncanvas.addEventListener(\"mousedown\", (evt) => {\n  const clickPoint = getMousePos(evt);\n  const clickedButton = getButtonAt(clickPoint);\n  if (clickedButton) {\n    clickedButton.clickCallback();\n  } else {\n    if (currMode == Mode.Edit) {\n      const clickedShape = getTopShapeAt(clickPoint);\n      if (currEditMode == EditMode.Tabulate) {\n        if (clickedShape) {\n          if (tabulateCandidate === null) {\n            tabulateCandidate = clickedShape;\n            tabulateCandidate.selected = true;\n          } else {\n            const tmp = clickedShape.transform.zInd;\n            clickedShape.transform.setZInd(tabulateCandidate.transform.zInd);\n            tabulateCandidate.transform.setZInd(tmp);\n            tabulateCandidate.selected = false;\n            tabulateCandidate = null;\n          }\n        }\n      } else {\n        if (clickedShape) {\n          editShape = clickedShape;\n          editPrevPoint = clickPoint;\n        }\n      }\n    } else {\n      if (clickPoint.x < 200 && clickPoint.y < 100) return;\n      switch (currCreateMode) {\n        case CreateMode.Square:\n          shapes.push(\n            new Polygon(new Transform(clickPoint, 0, Point.unit), [\n              new Point(1, -1),\n              new Point(1, 1),\n              new Point(-1, 1),\n              new Point(-1, -1),\n            ])\n          );\n          break;\n        case CreateMode.Triangle:\n          shapes.push(\n            new Polygon(new Transform(clickPoint, 0, Point.unit), [\n              new Point(1, 1),\n              new Point(-1, 1),\n              new Point(0, -1),\n            ])\n          );\n          break;\n        case CreateMode.Arrow:\n          shapes.push(\n            new Polygon(new Transform(clickPoint, 0, Point.unit), [\n              new Point(0, -1),\n              new Point(2, -2),\n              new Point(1, 0),\n              new Point(1, -1),\n            ])\n          );\n          break;\n        case CreateMode.Star:\n          shapes.push(\n            new Polygon(\n              new Transform(clickPoint, 0, Point.unit),\n              [\n                new Point(0, -2.5),\n                new Point(0.9, -0.5),\n                new Point(3, -0.5),\n                new Point(1.35, 0.5),\n                new Point(2.25, 2.5),\n                new Point(0, 1.5),\n                new Point(-2.25, 2.5),\n                new Point(-1.35, 0.5),\n                new Point(-3, -0.5),\n                new Point(-0.9, -0.5),\n              ].map((p) => p.multiply(0.5))\n            )\n          );\n          break;\n      }\n    }\n    draw();\n  }\n});\n\ncanvas.addEventListener(\"mouseup\", () => {\n  editShape = null;\n  editPrevPoint = null;\n});\n\ncanvas.addEventListener(\"mouseleave\", () => {\n  editShape = null;\n  editPrevPoint = null;\n});\n\ncanvas.addEventListener(\"mousemove\", (evt) => {\n  if (editShape) {\n    const currPoint = getMousePos(evt);\n    const editDiff = editPrevPoint.diff(currPoint);\n    editPrevPoint = currPoint;\n    switch (currEditMode) {\n      case EditMode.Move:\n        editShape.transform.addPosition(editDiff);\n        break;\n      case EditMode.Rotate:\n        editShape.transform.addRotation(editDiff.y);\n        break;\n      case EditMode.Scale:\n        editShape.transform.addScale(editDiff.multiply(0.01).flipY());\n        break;\n    }\n    draw();\n  }\n});\n\ndraw();\n\nsetTimeout(draw, 100);\nsetTimeout(draw, 500);\nsetTimeout(draw, 1000);\nsetTimeout(draw, 3000);\nsetTimeout(draw, 10000);\n"]}